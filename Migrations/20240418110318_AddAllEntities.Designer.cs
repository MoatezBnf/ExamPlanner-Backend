// <auto-generated />
using System;
using ExamPlanner_Backend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExamPlanner_Backend.Migrations
{
    [DbContext(typeof(ExamPlannerDbContext))]
    [Migration("20240418110318_AddAllEntities")]
    partial class AddAllEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExamPlanner_Backend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.Class", b =>
                {
                    b.Property<int?>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ClassId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpecialityLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialityLevelLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialityLevelSpecialityId")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex("SpecialityLevelSpecialityId", "SpecialityLevelLevelId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            DepartmentId = 2,
                            Name = "Digital"
                        },
                        new
                        {
                            DepartmentId = 3,
                            Name = "Business"
                        },
                        new
                        {
                            DepartmentId = 4,
                            Name = "Polytechnic"
                        });
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.Exam", b =>
                {
                    b.Property<int?>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ExamId"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpecialityLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialityLevelLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialityLevelSpecialityId")
                        .HasColumnType("int");

                    b.HasKey("ExamId");

                    b.HasIndex("SpecialityLevelSpecialityId", "SpecialityLevelLevelId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.Group", b =>
                {
                    b.Property<int?>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("GroupId"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("GroupId");

                    b.HasIndex("ClassId");

                    b.HasIndex("RoomId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.Level", b =>
                {
                    b.Property<int?>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("LevelId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LevelId");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.Room", b =>
                {
                    b.Property<int?>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("RoomId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.Speciality", b =>
                {
                    b.Property<int?>("SpecialityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("SpecialityId"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecialityId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.SpecialityLevel", b =>
                {
                    b.Property<int?>("SpecialityId")
                        .HasColumnType("int");

                    b.Property<int?>("LevelId")
                        .HasColumnType("int");

                    b.HasKey("SpecialityId", "LevelId");

                    b.HasIndex("LevelId");

                    b.ToTable("SpecialityLevels");
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.Student", b =>
                {
                    b.Property<int?>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("StudentId"));

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.HasIndex("GroupId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.UserDepartment", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("UserDepartments");
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DepartmentIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "35f5ff75-c156-4d8e-ae21-cef814980769",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "d9cefcb0-c6e6-49f8-b058-d5eefd42b12a",
                            Name = "Director",
                            NormalizedName = "DIRECTOR"
                        },
                        new
                        {
                            Id = "822a9478-0948-40a7-bef8-ac6c665b1b22",
                            Name = "StudentAffairsService",
                            NormalizedName = "STUDENTAFFAIRSSERVICE"
                        },
                        new
                        {
                            Id = "da809682-0d16-4ff5-893d-56d2bed8f489",
                            Name = "PrintingService",
                            NormalizedName = "PRINTINGSERVICE"
                        },
                        new
                        {
                            Id = "26bfc605-dab5-4925-88e3-c6f862db56af",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.Class", b =>
                {
                    b.HasOne("ExamPlanner_Backend.Models.SpecialityLevel", "SpecialityLevel")
                        .WithMany("Classes")
                        .HasForeignKey("SpecialityLevelSpecialityId", "SpecialityLevelLevelId");

                    b.Navigation("SpecialityLevel");
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.Exam", b =>
                {
                    b.HasOne("ExamPlanner_Backend.Models.SpecialityLevel", "SpecialityLevel")
                        .WithMany("Exams")
                        .HasForeignKey("SpecialityLevelSpecialityId", "SpecialityLevelLevelId");

                    b.Navigation("SpecialityLevel");
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.Group", b =>
                {
                    b.HasOne("ExamPlanner_Backend.Models.Class", "Class")
                        .WithMany("Groups")
                        .HasForeignKey("ClassId");

                    b.HasOne("ExamPlanner_Backend.Models.Room", "Room")
                        .WithMany("Groups")
                        .HasForeignKey("RoomId");

                    b.Navigation("Class");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.Speciality", b =>
                {
                    b.HasOne("ExamPlanner_Backend.Models.Department", "Department")
                        .WithMany("Specialities")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.SpecialityLevel", b =>
                {
                    b.HasOne("ExamPlanner_Backend.Models.Level", "Level")
                        .WithMany("SpecialityLevels")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamPlanner_Backend.Models.Speciality", "Speciality")
                        .WithMany("SpecialityLevels")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.Student", b =>
                {
                    b.HasOne("ExamPlanner_Backend.Models.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.UserDepartment", b =>
                {
                    b.HasOne("ExamPlanner_Backend.Models.Department", "Department")
                        .WithMany("UserDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamPlanner_Backend.Models.ApplicationUser", "User")
                        .WithMany("UserDepartments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ExamPlanner_Backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ExamPlanner_Backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamPlanner_Backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ExamPlanner_Backend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserDepartments");
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.Class", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.Department", b =>
                {
                    b.Navigation("Specialities");

                    b.Navigation("UserDepartments");
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.Level", b =>
                {
                    b.Navigation("SpecialityLevels");
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.Room", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.Speciality", b =>
                {
                    b.Navigation("SpecialityLevels");
                });

            modelBuilder.Entity("ExamPlanner_Backend.Models.SpecialityLevel", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Exams");
                });
#pragma warning restore 612, 618
        }
    }
}
